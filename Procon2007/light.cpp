//*==============================================
//light.cpp
//*==============================================

//===============================================
//include
//===============================================
#include "light.h"

//===============================================
//variable
//===============================================
D3DLIGHT9 CLight::m_light;
CVector3 CLight::m_vPos;

//===============================================
//コンストラクタ
//===============================================
//[input]
//	なし
//[return]
//	なし
//===============================================
CLight::CLight()
{
	m_vPos.Set(0.0f, 0.0f, 0.0f);
}

//===============================================
//初期化
//===============================================
//[input]
//	なし
//[return]
//	なし
//===============================================
void CLight::Init()
{
	/*ライト状態のセット*/
	SetLightParam();
}

//===============================================
//処理
//===============================================
//[input]
//	なし
//[return]
//	なし
//===============================================
void CLight::Exec()
{
	/*ライトのセット*/
	SetLight();
}

//===============================================
//ライトの位置の設定
//===============================================
//[input]
//	Pos:位置
//===============================================
void CLight::SetPosition(CVector3 *Pos)
{
	m_vPos = *Pos;
}

//===============================================
//ライト状態の設定
//===============================================
//[input]
//	なし
//[return]
//	なし
//===============================================
void CLight::SetLightParam()
{
	ZeroMemory(&m_light, sizeof(D3DLIGHT9) );
	
	m_light.Type = D3DLIGHT_DIRECTIONAL;
	m_light.Diffuse.r = 0.8f;
	m_light.Diffuse.g = 0.8f;
	m_light.Diffuse.b = 0.8f;
	m_light.Direction = m_vPos;
	m_light.Range = 300.0f;
	
}

//===============================================
//ライトの設定
//===============================================
//[input]
//	なし
//[return]
//	なし
//===============================================
bool CLight::SetLight()
{
	Joker::GetDevice()->SetLight(0, &m_light);
	Joker::GetDevice()->LightEnable(0, TRUE);
	
	Joker::GetDevice()->SetRenderState(D3DRS_AMBIENT, 0x88888888);
	Joker::GetDevice()->SetRenderState(D3DRS_LIGHTING, TRUE);
	
	return TRUE;
}
